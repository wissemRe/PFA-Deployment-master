# -*- coding: utf-8 -*-
"""FL_Type1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ivMPvqZZEuZt0V8U6iAh02WoLcDBseFO
"""

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

# New Antecedent/Consequent objects hold universe variables and membership
# functions
temperature = ctrl.Antecedent(np.arange(-10, 60, 1), 'temperature')
humidity = ctrl.Antecedent(np.arange(0, 100, 1), 'humidity')
decision = ctrl.Consequent(np.arange(0, 10, 0.1), 'decision')

# Auto-membership function population is possible with .automf(3, 5, or 7)
# temperature.automf(3)
# humidity.automf(3)

temperature['poor'] = fuzz.trimf(temperature.universe, [-10, 0, 10])
temperature['average'] = fuzz.trimf(temperature.universe, [8, 16, 25])
temperature['good'] = fuzz.trimf(temperature.universe, [20, 32, 60])
##################################################################

humidity['poor'] = fuzz.trimf(humidity.universe, [0, 40, 50])
humidity['average'] = fuzz.trimf(humidity.universe, [45, 70, 85])
humidity['good'] = fuzz.trimf(humidity.universe, [80, 100, 100])

##################################################################

# Custom membership functions can be built interactively with a familiar,
# Pythonic API
decision['close'] = fuzz.trimf(decision.universe, [0, 3, 6])
decision['open'] = fuzz.trimf(decision.universe, [4, 7, 10])

# You can see how these look with .view()
temperature['poor'].view()

humidity.view()

decision.view()

rule1 = ctrl.Rule(temperature['poor'] & humidity['good'], decision['close'])
rule2 = ctrl.Rule(temperature['poor'] & humidity['average'], decision['close'])
rule3 = ctrl.Rule(temperature['average'] & humidity['good'], decision['close'])
rule4 = ctrl.Rule(temperature['good'] & humidity['good'], decision['close'])

rule5 = ctrl.Rule(temperature['average'] & humidity['average'], decision['open'])
rule6 = ctrl.Rule(temperature['average'] & humidity['poor'], decision['open'])
rule7 = ctrl.Rule(temperature['poor'] & humidity['poor'], decision['open'])
rule8 = ctrl.Rule(temperature['good'] & (humidity['poor'] | humidity['average']), decision['open'])

rule1.view()

print(rule1)
print(rule2)
print(rule3)
print(rule4)
print(rule5)
print(rule6)
print(rule7)
print(rule8)

decision_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6, rule7, rule8])

final_decision = ctrl.ControlSystemSimulation(decision_ctrl)

# Pass inputs to the ControlSystem using Antecedent labels with Pythonic API
# Note: if you like passing many inputs all at once, use .inputs(dict_of_data)
final_decision.input['temperature'] = 25
final_decision.input['humidity'] = 82

# Crunch the numbers
final_decision.compute()

print(final_decision.output['decision'])
decision.view(sim=final_decision)


def action():
    if final_decision.output['decision'] < 0.5:
        print('close')
        return 'close'
    else:
        print('open')
        return 'open'


action()
